// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kelas.proto

package packets

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KelasRequest struct {
	Data                 *any.Any `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KelasRequest) Reset()         { *m = KelasRequest{} }
func (m *KelasRequest) String() string { return proto.CompactTextString(m) }
func (*KelasRequest) ProtoMessage()    {}
func (*KelasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab7b3fc6b72ef837, []int{0}
}

func (m *KelasRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KelasRequest.Unmarshal(m, b)
}
func (m *KelasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KelasRequest.Marshal(b, m, deterministic)
}
func (m *KelasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KelasRequest.Merge(m, src)
}
func (m *KelasRequest) XXX_Size() int {
	return xxx_messageInfo_KelasRequest.Size(m)
}
func (m *KelasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KelasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KelasRequest proto.InternalMessageInfo

func (m *KelasRequest) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type KelasRequestByID struct {
	KelasID              string   `protobuf:"bytes,1,opt,name=KelasID,proto3" json:"KelasID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KelasRequestByID) Reset()         { *m = KelasRequestByID{} }
func (m *KelasRequestByID) String() string { return proto.CompactTextString(m) }
func (*KelasRequestByID) ProtoMessage()    {}
func (*KelasRequestByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab7b3fc6b72ef837, []int{1}
}

func (m *KelasRequestByID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KelasRequestByID.Unmarshal(m, b)
}
func (m *KelasRequestByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KelasRequestByID.Marshal(b, m, deterministic)
}
func (m *KelasRequestByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KelasRequestByID.Merge(m, src)
}
func (m *KelasRequestByID) XXX_Size() int {
	return xxx_messageInfo_KelasRequestByID.Size(m)
}
func (m *KelasRequestByID) XXX_DiscardUnknown() {
	xxx_messageInfo_KelasRequestByID.DiscardUnknown(m)
}

var xxx_messageInfo_KelasRequestByID proto.InternalMessageInfo

func (m *KelasRequestByID) GetKelasID() string {
	if m != nil {
		return m.KelasID
	}
	return ""
}

type OutputKelas struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputKelas) Reset()         { *m = OutputKelas{} }
func (m *OutputKelas) String() string { return proto.CompactTextString(m) }
func (*OutputKelas) ProtoMessage()    {}
func (*OutputKelas) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab7b3fc6b72ef837, []int{2}
}

func (m *OutputKelas) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputKelas.Unmarshal(m, b)
}
func (m *OutputKelas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputKelas.Marshal(b, m, deterministic)
}
func (m *OutputKelas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputKelas.Merge(m, src)
}
func (m *OutputKelas) XXX_Size() int {
	return xxx_messageInfo_OutputKelas.Size(m)
}
func (m *OutputKelas) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputKelas.DiscardUnknown(m)
}

var xxx_messageInfo_OutputKelas proto.InternalMessageInfo

func (m *OutputKelas) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OutputKelas) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*KelasRequest)(nil), "packets.KelasRequest")
	proto.RegisterType((*KelasRequestByID)(nil), "packets.KelasRequestByID")
	proto.RegisterType((*OutputKelas)(nil), "packets.OutputKelas")
}

func init() { proto.RegisterFile("kelas.proto", fileDescriptor_ab7b3fc6b72ef837) }

var fileDescriptor_ab7b3fc6b72ef837 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4e, 0xcd, 0x49,
	0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0x4c, 0xce, 0x4e, 0x2d, 0x29,
	0x96, 0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x27, 0x95, 0xa6, 0xe9, 0x27,
	0xe6, 0x55, 0x42, 0xd4, 0x28, 0x59, 0x70, 0xf1, 0x78, 0x83, 0xb4, 0x04, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x69, 0x70, 0xb1, 0xb8, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x1b, 0x89, 0xe8, 0x41, 0x74, 0xea, 0xc1, 0x74, 0xea, 0x39, 0xe6, 0x55, 0x06, 0x81, 0x55, 0x28,
	0xe9, 0x70, 0x09, 0x20, 0xeb, 0x74, 0xaa, 0xf4, 0x74, 0x11, 0x92, 0xe0, 0x62, 0x07, 0x8b, 0x79,
	0xba, 0x80, 0x0d, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xfc, 0xb9, 0xb8, 0xfd, 0x4b, 0x4b, 0x0a, 0x4a,
	0x4b, 0xc0, 0x02, 0x42, 0x62, 0x5c, 0x6c, 0xc1, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x60, 0x75, 0xac,
	0x41, 0x50, 0x1e, 0xdc, 0x7a, 0x26, 0x42, 0xd6, 0x1b, 0x4d, 0x63, 0xe4, 0x62, 0x85, 0x98, 0xe5,
	0xc1, 0x25, 0xec, 0x9e, 0x0a, 0x31, 0xd7, 0xa9, 0xd2, 0x33, 0x25, 0xb4, 0x38, 0x35, 0x39, 0xb1,
	0x38, 0x55, 0x48, 0x52, 0x0f, 0xea, 0x7d, 0x3d, 0x74, 0x67, 0x4a, 0x89, 0xc0, 0xa5, 0x90, 0xdc,
	0xa4, 0xc4, 0x20, 0xe4, 0xcc, 0x25, 0xe4, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x0a, 0x16, 0x80, 0x19,
	0x24, 0x8a, 0xd5, 0x20, 0x5c, 0x86, 0x38, 0x71, 0x47, 0x71, 0xea, 0x59, 0x43, 0xa5, 0x92, 0xd8,
	0xc0, 0x2e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x12, 0x43, 0xdd, 0x98, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KelasClient is the client API for Kelas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KelasClient interface {
	GetKelasByIdUsecase(ctx context.Context, in *KelasRequestByID, opts ...grpc.CallOption) (*OutputKelas, error)
	CreateKelasUsecase(ctx context.Context, in *KelasRequest, opts ...grpc.CallOption) (*OutputKelas, error)
}

type kelasClient struct {
	cc *grpc.ClientConn
}

func NewKelasClient(cc *grpc.ClientConn) KelasClient {
	return &kelasClient{cc}
}

func (c *kelasClient) GetKelasByIdUsecase(ctx context.Context, in *KelasRequestByID, opts ...grpc.CallOption) (*OutputKelas, error) {
	out := new(OutputKelas)
	err := c.cc.Invoke(ctx, "/packets.Kelas/GetKelasByIdUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasClient) CreateKelasUsecase(ctx context.Context, in *KelasRequest, opts ...grpc.CallOption) (*OutputKelas, error) {
	out := new(OutputKelas)
	err := c.cc.Invoke(ctx, "/packets.Kelas/CreateKelasUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KelasServer is the server API for Kelas service.
type KelasServer interface {
	GetKelasByIdUsecase(context.Context, *KelasRequestByID) (*OutputKelas, error)
	CreateKelasUsecase(context.Context, *KelasRequest) (*OutputKelas, error)
}

// UnimplementedKelasServer can be embedded to have forward compatible implementations.
type UnimplementedKelasServer struct {
}

func (*UnimplementedKelasServer) GetKelasByIdUsecase(ctx context.Context, req *KelasRequestByID) (*OutputKelas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKelasByIdUsecase not implemented")
}
func (*UnimplementedKelasServer) CreateKelasUsecase(ctx context.Context, req *KelasRequest) (*OutputKelas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKelasUsecase not implemented")
}

func RegisterKelasServer(s *grpc.Server, srv KelasServer) {
	s.RegisterService(&_Kelas_serviceDesc, srv)
}

func _Kelas_GetKelasByIdUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KelasRequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServer).GetKelasByIdUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Kelas/GetKelasByIdUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServer).GetKelasByIdUsecase(ctx, req.(*KelasRequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kelas_CreateKelasUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServer).CreateKelasUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Kelas/CreateKelasUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServer).CreateKelasUsecase(ctx, req.(*KelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kelas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Kelas",
	HandlerType: (*KelasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKelasByIdUsecase",
			Handler:    _Kelas_GetKelasByIdUsecase_Handler,
		},
		{
			MethodName: "CreateKelasUsecase",
			Handler:    _Kelas_CreateKelasUsecase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kelas.proto",
}
